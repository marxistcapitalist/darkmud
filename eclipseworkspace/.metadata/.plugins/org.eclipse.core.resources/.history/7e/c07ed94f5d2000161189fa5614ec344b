package application;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map.Entry;

import application.model.Item;
import application.model.Room;
import application.model.interfaces.Consumable;
import application.model.interfaces.Containerable;
import application.model.interfaces.Inventoryable;
import application.model.interfaces.Keyable;
import application.model.interfaces.Keyedable;
import application.model.interfaces.Killable;
import application.model.interfaces.Statusable;
import application.model.rooms.Base;
import application.model.rooms.BreadcrumbA;
import application.model.rooms.BreadcrumbB;
import application.model.rooms.BriarPatch;
import application.model.rooms.BrushTower;
import application.model.rooms.Clearing;
import application.model.rooms.ClearingE;
import application.model.rooms.ClearingN;
import application.model.rooms.ClearingW;
import application.model.rooms.CrossRoads;
import application.model.rooms.ForestA;
import application.model.rooms.ForestPath;
import application.model.rooms.FrontYard;
import application.model.rooms.Grassland;
import application.model.rooms.GrueStorage;
import application.model.rooms.House;
import application.model.rooms.HouseKitchen;
import application.model.rooms.Library;
import application.model.rooms.OldStaircase;
import application.model.rooms.ToadstoolRing;
import application.model.rooms.WornRoadA;
import application.model.rooms.WornRoadB;
import application.view.LogEntry.LogType;
import application.view.Logger;

public class MapManager {
	
	private static String room = "Clearing";
	private static Health health = Health.HEALTHY;
	
	private static ArrayList<Item> inventory = new ArrayList<Item>() {
		@Override
		public String toString() {
			String temp = "\n";
			for (Item item : inventory) {
				temp += "\t" + item.description + " " + item.identifier + "\n";
			}
			return temp;
		}
	};
	
	
	private static HashMap<String, Room> rooms = new HashMap<String, Room>();
	
	public enum Health {
		HEALTHY ("Healthy"), HURT ("Hurt"), WOUNDED ("Wounded"), DEAD ("Dead");
		
		private String status;
		
		Health(String status) {
			this.status = status;
		}
		
		@Override
		public String toString() {
			return this.status;
		}
	}
	
	//Defines the map itself and adds rooms to a HashMap for reference
	public MapManager () throws InterruptedException {
		room = "Clearing";
		health = Health.HEALTHY;
		inventory.clear();
		rooms.clear();
		
		rooms.put(Clearing.identifier, new Clearing(rooms));
		rooms.put(FrontYard.identifier, new FrontYard(rooms));
		rooms.put(House.identifier, new House(rooms));
		rooms.put(Library.identifier, new Library(rooms));
		rooms.put(HouseKitchen.identifier, new HouseKitchen(rooms));
		rooms.put(OldStaircase.identifier, new OldStaircase(rooms));
		rooms.put(GrueStorage.identifier, new GrueStorage(rooms));
		rooms.put(WornRoadA.identifier, new WornRoadA(rooms));
		rooms.put(WornRoadB.identifier, new WornRoadB(rooms));
		rooms.put(Grassland.identifier, new Grassland(rooms));
		rooms.put(ClearingW.identifier, new ClearingW(rooms));
		rooms.put(BrushTower.identifier, new BrushTower(rooms));
		rooms.put(ClearingN.identifier, new ClearingN(rooms));
		rooms.put(ClearingE.identifier, new ClearingE(rooms));
		rooms.put(ToadstoolRing.identifier, new ToadstoolRing(rooms));
		rooms.put(ForestA.identifier, new ForestA(rooms));
		rooms.put(BriarPatch.identifier, new BriarPatch(rooms));
		rooms.put(ForestPath.identifier, new ForestPath(rooms));
		rooms.put(CrossRoads.identifier, new CrossRoads(rooms));
		rooms.put(BreadcrumbA.identifier, new BreadcrumbA(rooms));
		rooms.put(BreadcrumbB.identifier, new BreadcrumbB(rooms));
		
		//Executes the initialize method in every mapped room
		//Which must be done after the map itself is built
		for (Entry<String, Room> room : rooms.entrySet()) {
			room.getValue().initialize();
		}
		
		Logger.log(LogType.ROOM, "You awake in the world, standing atop a grassy hill.\nYou see a large country house to the south, and a leaflet on the ground.");
		Logger.log(LogType.RESPONSE, "You can go: " + getCurrentRoom().getDoorwayDirections());

	}

	public static Room getCurrentRoom () {
		return rooms.get(room);
	}
	
	public static ArrayList<Item> getInventoryItems() {
		return inventory;
	}
	
	public static String getCurrentRoomName() {
		return room;
	}
	
	public static String getHealth() {
		return health.toString();
	}
	
	public static Health getHealthRaw() {
		return health;
	}
	
	public static void setHealth(Health h) {
		switch(h) {
		case HEALTHY:
			Logger.log(LogType.RESPONSE, "Your status was changed to HEALTHY");
			health = Health.HEALTHY;
			break;
		case HURT:
			Logger.log(LogType.RESPONSE, "Your status was to HURT");
			health = Health.HURT;
			break;
		case WOUNDED:
			Logger.log(LogType.RESPONSE, "Your status was changed to WOUNDED");
			health = Health.WOUNDED;
			break;
		case DEAD:
			Logger.log(LogType.RESPONSE, "Your status was changed to DEAD\nYou died!");
			health = Health.DEAD;
			break;
		}
	}
	
	public static void incrementHealth() {
		switch (health) {
		case HEALTHY:
			Logger.log(LogType.RESPONSE, "You were already at full health");
			break;
		case HURT:
			Logger.log(LogType.RESPONSE, "Your status was increased to HEALTHY");
			health = Health.HEALTHY;
			break;
		case WOUNDED:
			Logger.log(LogType.RESPONSE, "Your status was increased to HURT");
			health = Health.HURT;
			break;
		case DEAD:
			Logger.log(LogType.RESPONSE, "You are already dead... you lost.");
			break;
		}
	}
	
	public static void decrementHealth() {
		switch (health) {
		case DEAD: 
			Logger.log(LogType.RESPONSE, "Your dead body loses even more life... somehow.");
			break;
		case WOUNDED:
			Logger.log(LogType.RESPONSE, "Your status was reduced to DEAD.\nYou died!");
			health = Health.DEAD;
			break;
		case HURT:
			Logger.log(LogType.RESPONSE, "Your status was reduced to WOUNDED.");
			health = Health.WOUNDED;
			break;
		case HEALTHY:
			Logger.log(LogType.RESPONSE, "Your status was reduced to HURT.");
			health = Health.HURT;
			break;
		}
	}


	public static ArrayList<Item> getTypedInventoryItems(String classtype) {
		ArrayList<Item> temp = new ArrayList<>();
		if (inventory != null) {
			if (classtype.equalsIgnoreCase("consumable")) {
				for (Item item : inventory) {
					if (item instanceof Consumable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("containerable")) {
				for (Item item : inventory) {
					if (item instanceof Containerable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("inventoryable")) {
				for (Item item : inventory) {
					if (item instanceof Inventoryable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("keyable")) {
				for (Item item : inventory) {
					if (item instanceof Keyable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("keyedable")) {
				for (Item item : inventory) {
					if (item instanceof Keyedable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("killable")) {
				for (Item item : inventory) {
					if (item instanceof Killable)
						temp.add(item);
				}
			}
			if (classtype.equalsIgnoreCase("statusable")) {
				for (Item item : inventory) {
					if (item instanceof Statusable)
						temp.add(item);
				}
			}		
		}
		return temp;
	}
	
	public static void movePlayer(Room leadsTo) {
		room = leadsTo.id;
		Logger.log(LogType.ROOM, leadsTo.getDescription());
		if(leadsTo.getDoorways().size() > 0)
			Logger.log(LogType.RESPONSE, "You can go: " + rooms.get(room).getDoorwayInformation());
		leadsTo.enter();
	}
	
	public static void moveOnWin() {
		room = "EndingRoom";
		Logger.log(LogType.ROOM, rooms.get(room).getDescription());
		Logger.log(LogType.END, "You have won the game!");
	}
	
	public static Collection<Room> getAllRoomsUnnamed() {
		return rooms.values();
	}
}